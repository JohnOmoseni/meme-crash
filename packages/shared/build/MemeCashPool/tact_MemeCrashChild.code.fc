#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_MemeCrashChild.headers.fc";
#include "tact_MemeCrashChild.stdlib.fc";
#include "tact_MemeCrashChild.storage.fc";

;;
;; Contract MemeCrashChild functions
;;

(slice, slice, int) $MemeCrashChild$_contract_init(slice $parent, slice $owner) impure inline_ref {
    var (($self'parent, $self'owner, $self'balance)) = (null(), null(), null());
    $self'parent = $parent;
    $self'owner = $owner;
    $self'balance = 0;
    return ($self'parent, $self'owner, $self'balance);
}

((slice, slice, int), int) $MemeCrashChild$_fun_predictionBalance((slice, slice, int) $self) impure inline_ref {
    var (($self'parent, $self'owner, $self'balance)) = $self;
    return (($self'parent, $self'owner, $self'balance), $self'balance);
}

;;
;; Receivers of a Contract MemeCrashChild
;;

(((slice, slice, int)), ()) $MemeCrashChild$_internal_binary_InternalAddTons((slice, slice, int) $self, (int, slice) $msg) impure inline {
    var ($self'parent, $self'owner, $self'balance) = $self;
    var ($msg'amount, $msg'origin) = $msg;
    throw_unless(49469, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $self'balance = ($self'balance + $msg'amount);
    return (($self'parent, $self'owner, $self'balance), ());
}

(((slice, slice, int)), ()) $MemeCrashChild$_internal_binary_InternalSubTons((slice, slice, int) $self, (slice) $msg) impure inline {
    var ($self'parent, $self'owner, $self'balance) = $self;
    var ($msg'origin) = $msg;
    throw_unless(49469, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $self'balance = 0;
    return (($self'parent, $self'owner, $self'balance), ());
}

;;
;; Get methods of a Contract MemeCrashChild
;;

_ %predictionBalance() method_id(113154) {
    var self = $MemeCrashChild$_contract_load();
    var res = self~$MemeCrashChild$_fun_predictionBalance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmRgeDrHF4w51rW2SqGbDHP1Nn2gm3BP5pPxERvb8CU2z2";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MemeCrashChild
;;

((slice, slice, int), int) $MemeCrashChild$_contract_router_internal((slice, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InternalAddTons message
    if (op == 1709798588) {
        var msg = in_msg~$InternalAddTons$_load();
        self~$MemeCrashChild$_internal_binary_InternalAddTons(msg);
        return (self, true);
    }
    
    ;; Receive InternalSubTons message
    if (op == 1285286933) {
        var msg = in_msg~$InternalSubTons$_load();
        self~$MemeCrashChild$_internal_binary_InternalSubTons(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MemeCrashChild$_contract_load();
    
    ;; Handle operation
    int handled = self~$MemeCrashChild$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MemeCrashChild$_contract_store(self);
}
